# Import required libraries
import pandas as pd
import dash
import dash_html_components as html
import dash_core_components as dcc
from dash.dependencies import Input, Output
import plotly.express as px

# Read the airline data into pandas dataframe
spacex_df = pd.read_csv("spacex_launch_dash.csv")
max_payload = spacex_df['Payload Mass (kg)'].max()
min_payload = spacex_df['Payload Mass (kg)'].min()
#airline_data = pd.read_csv("airline_data.csv")

# Create a dash application
app = dash.Dash(__name__)

# Create an app layout
app.layout = html.Div(children=[html.H1('SpaceX Launch Records Dashboard',
                                        style={'textAlign': 'center', 'color': '#503D36',
                                               'font-size': 40}),
                                # TASK 1: Add a dropdown list to enable Launch Site selection
                                # The default select value is for ALL sites
                                # dcc.Dropdown(id='site-dropdown',...)
                                  dcc.Dropdown(id='site-dropdown',
                                                options=[
                                                    {'label': 'ALL', 'value': 'ALL'},
                                                    {'label': 'CCAFS LC-40', 'value': 'CCAFS LC-40'},
                                                    {'label': 'CCAFS SLC-40', 'value': 'CCAFS SLC-40'},
                                                    {'label': 'KSC LC-39A', 'value': 'KSC LC-39A'},
                                                    {'label': 'VAFB SLC-4E', 'value': 'VAFB SLC-4E'},
                                                ],
                                                value='ALL',
                                                placeholder="place holder here",
                                                searchable=True
                                                ),
                                html.Br(),

                                # TASK 2: Add a pie chart to show the total successful launches count for all sites
                                # If a specific launch site was selected, show the Success vs. Failed counts for the site
                                html.Div(dcc.Graph(id='success-pie-chart')),
                                html.Br(),

                                html.P("Payload range (Kg):"),
                                # TASK 3: Add a slider to select payload range
                                dcc.RangeSlider(id='payload-slider',
                                                min=0, max=10000, step=1000,
                                                marks={0: '0',
                                                        2000: '2000',
                                                        4000: '4000',
                                                        6000: '6000',
                                                        8000: '8000',
                                                        10000: '10000'},
                                                value=[min_payload , max_payload]),

                                # TASK 4: Add a scatter chart to show the correlation between payload and launch success
                                html.Div(dcc.Graph(id='success-payload-scatter-chart')),
                                ])

# TASK 2:
# Add a callback function for `site-dropdown` as input, `success-pie-chart` as output
# add callback decorator
@app.callback( Output(component_id='success-pie-chart', component_property='figure'),
               Input(component_id='site-dropdown', component_property='value'))

def get_pie_chart(entered_site):
    filtered_df = spacex_df[spacex_df['Launch Site']== entered_site]
    fd=filtered_df['class'].value_counts()
    fd=pd.DataFrame(fd)
    fd.reset_index(inplace=True)
    x = len(filtered_df['class'])
    if entered_site == 'ALL':
        fig = px.pie(spacex_df, values='class', 
            names='Launch Site', 
            title='Total sccess launches by site')
        return fig
    else:
        fig = px.pie(fd, values='class', 
            names='index', 
            title='Total success launches')
        return fig
        # return the outcomes piechart for a selected site   
 




# TASK 4:
# Add a callback function for `site-dropdown` and `payload-slider` as inputs, `success-payload-scatter-chart` as output
@app.callback( Output(component_id='success-payload-scatter-chart', component_property='figure'),
               [Input(component_id='site-dropdown', component_property='value'), Input(component_id="payload-slider", component_property="value")])

def scatter_chart(entered_site,entered_payload):
    filtered_df = spacex_df[spacex_df['Launch Site']== entered_site]
    #later remove and check
    min_load,max_load=entered_payload
    mask =  (filtered_df['Payload Mass (kg)'] > min_load) & (filtered_df['Payload Mass (kg)'] < max_load)
    mask1 =  (spacex_df['Payload Mass (kg)'] > min_load) & (spacex_df['Payload Mass (kg)'] < max_load)
    title = 'Correlation between Payload and Success' + entered_site
    #fd=filtered_df['class'].value_counts()
    #fd=pd.DataFrame(fd)
    #fd.reset_index(inplace=True)
    #x = len(filtered_df['class'])
    if entered_site == 'ALL':
        # Line plot for carrier delay
        payload_fig = px.scatter(spacex_df[mask1], x='Payload Mass (kg)', y='class', color='Booster Version Category', title='Correlation between Payload and Success')

        return payload_fig
    else:
         # Line plot for carrier delay
        payload_fig = px.scatter(filtered_df[mask], x='Payload Mass (kg)', y='class', color='Booster Version Category', title= 'Correlation between Payload and Success ' + entered_site)

        return payload_fig

# Run the app
if __name__ == '__main__':
    app.run_server()
